Структура проекта FatherGuard
Общее описание
Проект представляет собой юридическое веб-приложение для обработки документов и генерации жалоб с использованием:

Vue 3 (Composition API)

Pinia для управления состоянием

Vue Router для навигации

Vite для сборки

Node.js (v24.5.0) для бекенда

Локальной модели llama3:8b для анализа текста

Основные компоненты системы
1. Фронтенд (Vue 3)
Хранилища (Pinia)
aiStore.js - взаимодействие с AI моделью:

Состояние: isLoading, error, apiStatus, activeModel

Действия: generateSummary, extractKeyParagraphs, detectViolations, generateComplaint

Геттеры: isServerOnline, activeModelName

documentStore.js - управление документами:

Состояние: documents, currentDocument, isLoading, error

Действия: fetchDocuments, uploadFiles, saveDocument, analyzeDocument

Геттеры: agenciesList, hasAttachments

complaintStore.js - управление жалобами:

Состояние: complaints, isLoading, error, generatedComplaint

Действия: fetchComplaints, generateComplaint, exportComplaint

Геттеры: agenciesOptions

Компоненты
FileUpload.vue - загрузка файлов (PDF, TXT, DOC)

NotificationToast.vue - уведомления

HomeView.vue - главная страница с формой ввода

DocumentReview.vue - предпросмотр и редактирование документа

DocumentsList.vue - список документов

ComplaintsList.vue - список жалоб

ComplaintForm.vue - форма создания жалобы

DocumentDetail.vue - детали документа

Композиции
useDocumentAnalysis.js - анализ документов

useComplaintGenerator.js - генерация жалоб

2. Бекенд (Node.js)
Контроллеры
aiController.js - обработка AI запросов

documentController.js - управление документами

complaintController.js - управление жалобами

Сервисы
aiService.js - взаимодействие с локальной моделью

pdfService.js - обработка PDF файлов

Модели
Document.js - модель документа

Complaint.js - модель жалобы

Взаимосвязи компонентов
Фронтенд
text
App.vue
├── Router
│   ├── HomeView.vue
│   │   └── FileUpload.vue
│   ├── DocumentReview.vue
│   ├── DocumentsList.vue
│   ├── DocumentDetail.vue
│   └── ComplaintsList.vue
│       └── ComplaintForm.vue
└── Stores
    ├── documentStore.js
    ├── complaintStore.js
    └── aiStore.js
Бекенд
text
app.mjs
├── Routes
│   ├── aiRoutes.js
│   ├── documentRoutes.js
│   └── complaintRoutes.js
└── Services
    ├── aiService.js
    └── pdfService.js
Критически важные функции и переменные
Фронтенд
documentStore.js:

currentDocument - текущий редактируемый документ

analyzeDocument() - анализ документа с помощью AI

saveDocument() - сохранение документа

aiStore.js:

_makeAIRequest() - базовый запрос к AI

generateComplaint() - генерация жалобы

FileUpload.vue:

handleFileUpload() - обработка загруженных файлов

Бекенд
aiService.js:

queryLocalModel() - запрос к локальной модели

analyzeLegalText() - анализ юридического текста

documentRoutes.js:

/upload - загрузка документов

/:id/analyze - анализ документа

Поток данных
Пользователь загружает документ через HomeView.vue → FileUpload.vue

Данные передаются в documentStore.uploadFiles()

Документ сохраняется через documentStore.saveDocument()

При анализе вызывается aiStore.analyzeDocument()

Для генерации жалобы используется complaintStore.generateComplaint()

Жалоба сохраняется в БД через бекенд API

Структура данных (db.json)
json
{
  "documents": [
    {
      "id": "uuid",
      "date": "дата поступления",
      "originalText": "дословный текст",
      "agencyTarget": "ведомство для жалобы",
      "summary": "краткая суть",
      "keyParagraphs": ["существенные параграфы"],
      "documentDate": "дата документа",
      "senderAgency": "ведомство-отправитель",
      "attachments": [
        {
          "documentDate": "дата",
          "senderAgency": "ведомство",
          "documentSummary": "краткая суть",
          "fullText": "полный текст",
          "keyParagraphs": ["цитаты"]
        }
      ],
      "complaints": ["id жалоб"]
    }
  ],
  "complaints": [
    {
      "id": "uuid",
      "documentId": "id документа",
      "agency": "ведомство",
      "content": "текст жалобы",
      "relatedDocuments": ["id связанных документов"]
    }
  ]
}
Важные замечания для LLM
Не изменять:

Имена хранилищ Pinia (documentStore, aiStore, complaintStore)

Основные методы (analyzeDocument, generateComplaint, saveDocument)

Структуру currentDocument в documentStore

Логика должна оставаться:

Вся бизнес-логика в хранилищах Pinia

Компоненты только для отображения

Формат взаимодействия с AI через aiStore

Особенности:

Все текстовые поля должны сохраняться дословно

Жалобы всегда привязываются к документам

Анализ документов должен выявлять нарушения и ключевые цитаты