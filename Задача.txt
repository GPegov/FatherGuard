- Файл documentStore.js (хранилище документов) -- Предоставил
Файл useComplaintStore.js (хранилище жалоб)
Файл aiStore.js (хранилище для работы с ИИ)
Файл DocumentReview.vue (компонент предпросмотра документа)
Файл HomeView.vue (главная страница с формой ввода)
Файл DocumentList.vue (список документов)
Файл ComplaintsList.vue (список жалоб)
Файл aiController.js (контроллер для работы с ИИ)
- Файл aiService.js (сервис для работы с моделью) -- Предоставил
Файл DocumentService.js (сервис для работы с документами)






Я работаю с Vue 3, Vite, Pinia и Vue Router. 

Мы с тобой создаём приложение на Vue3 Composition API c бекендом на Node.js v24.5.0. Python я использовать не умею. Помоги мне в дальнейшей разработке.

В логике мы широко используем Pinia и Vue Router.

Моё железо: Xeon E5 2640v4, 64Gb ddr4 Quad channel Ram.

Я использую Windows 10.

Я также локально скачал модель llama3:8b для использования её функционала в приложении. 

Отвечай мне на русском.

Никакой имеющися функционал в проекте не удаляй! Только после моей прямой просьбы! 

Вся логика и функционал должны быть в Pinia Store, а в компонентах только отображение.

Если тебе нужно ознакомится с другими файлами из моего проекта - попроси и я их пришлю.

У приложения есть функция загрузки PDF-файлов и распознавания в них текста. Далее распознанный текст передаётся для анализа в локальную нейросетевую модель и в нём выделяется краткая суть и существенные параграфы. Всей этой информацией пополняется файл db.json и в его структуре должны быть следующие поля: 

1) дата поступления

2) дословный текст пользователя 

3) ведомство на которое будет формироваться жалоба

4) краткая суть текста пользователя

5) дословно скопированные существенные параграфы (дословно - это очень важно для последующего составления жалоб)

6) расшифровка предоставленных им документов:

  а) Дата отправления документа

  б) Ведомство, отправившее документ

  в) краткая суть документа

  г) дословно скопированные существенные параграфы из расшифровки      документа (дословно - это очень важно для последующего      составления жалоб).

Нужно немного дополнить существующий промпт для модели, чтобы он соответствовал новым требованиям. 

После загрузки текста пользователя, вложенных документов и нажатия кнопки "Продолжить" на главной странице, открывается страница предпросмотра документа перед его сохранением с возможностью ручного редактирования (DocumentReview.vue). В этом компоненте есть все нужные поля, только вот поле краткой сути текста пользователя следует скрыть из видимости до того момента, пока не придёт ответ от модели с краткой сутью текста пользователя. Также ниже следует добавить недостающие поля из новой структуры базы данных db.json, чтобы вся информация из текущей карточки отображалась в этом компоненте.

Третья страница - отображение списком всех актов записей из файла db.json в виде поля даты формирования, ведомства, на которое будет сформирована жалоба и краткой сути текста пользователя.   

В правой части каждой записи есть кнопка "Сформировать жалобу".

После нажатия кнопки "Сформировать жалобу" локальная модель анализирует выбранный слот базы данных, а также остальные слоты db.json, поступившие ранее данного слота на предмет наличия сведений, существенных для составления жалобы на основе этого входящего документа,  и предлагает на выбор ведомства, в которые пользователь имеет право направить жалобу: 

- ФССП,

- Прокуратура',

- Суд (административное исковое заявление)

- Уполномоченный по правам человека (омбудсмен).  

После выбора ведомства, нейросеть формирует жалобу и сохраняет её в файл db.json по аналогии с методом сохранения входящих документов, только в сформированных жалобах добавляется поле, в ответ на какой из входящих документ сформирована эта жалоба.

Четвёртая страница - список сформированных жалоб, по аналогии с третьей страницей, но без кнопки анализировать. При клике  Напротив каждой сформированной жалобы должна быть кнопка "Экспорт" с возможностью сохранения выбранной жалобы в формате .txt или .doc.

Механика удаления входящих документов и сформированных жалоб уже сформирована - её менять не нужно, без моей прямой просьбы.  






Я работаю с Vue 3, Vite, Pinia и Vue Router. 
Мы с тобой создаём приложение на Vue3 Composition API c бекендом на Node.js v24.5.0. Python я использовать не умею. Помоги мне в дальнейшей разработке.
В логике мы широко используем Pinia и Vue Router.
Моё железо: Lenovo T480, Core i5 8350U, Intel UHD 620, 32Gb Ram.
Я использую Windows 10 pro.
Я также локально скачал модель llama3:8b для использования её функционала в приложении. 

Отвечай мне на русском.

Никакой имеющися функционал в проекте не удаляй! Только после моей прямой просьбы! 

Вся логика и функционал должны быть в Pinia Store, а в компонентах только отображение.

Если тебе нужно ознакомится с другими файлами из моего проекта - попроси и я их пришлю.

У приложения есть функция загрузки PDF-файлов и распознавания в них текста. Далее распознанный текст передаётся для анализа в локальную нейросетевую модель и в нём выделяется краткая суть и существенные параграфы. Всей этой информацией пополняется файл db.json и в его структуре должны быть следующие поля: 
1) дата поступления
2) дословный текст пользователя 
3) ведомство на которое будет формироваться жалоба
4) краткая суть текста пользователя
5) дословно скопированные существенные параграфы (дословно - это очень важно для последующего составления жалоб)
6) расшифровка предоставленных им документов:
  а) Дата отправления документа
  б) Ведомство, отправившее документ
  в) краткая суть документа
  г) дословно скопированные существенные параграфы из расшифровки      документа (дословно - это очень важно для последующего      составления жалоб).
Нужно немного дополнить существующий промпт для модели, чтобы он соответствовал новым требованиям. 

После загрузки текста пользователя, вложенных документов и нажатия кнопки "Продолжить" на главной странице, открывается страница предпросмотра документа перед его сохранением с возможностью ручного редактирования (DocumentReview.vue). В этом компоненте есть все нужные поля, только вот поле краткой сути текста пользователя следует скрыть из видимости до того момента, пока не придёт ответ от модели с краткой сутью текста пользователя. Также ниже следует добавить недостающие поля из новой структуры базы данных db.json, чтобы вся информация из текущей карточки отображалась в этом компоненте.

Третья страница - отображение списком всех актов записей из файла db.json в виде поля даты формирования, ведомства, на которое будет сформирована жалоба и краткой сути текста пользователя.   
В правой части каждой записи есть кнопка "Сформировать жалобу".
После нажатия кнопки "Сформировать жалобу" локальная модель анализирует выбранный слот базы данных, а также остальные слоты db.json, поступившие ранее данного слота на предмет наличия сведений, существенных для составления жалобы на основе этого входящего документа,  и предлагает на выбор ведомства, в которые пользователь имеет право направить жалобу: 
- ФССП,
- Прокуратура',
- Суд (административное исковое заявление)
- Уполномоченный по правам человека (омбудсмен).  
После выбора ведомства, нейросеть формирует жалобу и сохраняет её в файл db.json по аналогии с методом сохранения входящих документов, только в сформированных жалобах добавляется поле, в ответ на какой из входящих документ сформирована эта жалоба.

Четвёртая страница - список сформированных жалоб, по аналогии с третьей страницей, но без кнопки анализировать. При клике  Напротив каждой сформированной жалобы должна быть кнопка "Экспорт" с возможностью сохранения выбранной жалобы в формате .txt или .doc.
Механика удаления входящих документов и сформированных жалоб уже сформирована - её менять не нужно, без моей прямой просьбы.    

















Во вторых мне нужно затем анализировать весь этот файл db.json и находить моменты, где отдельные ведомства нарушили закон и затем формировать жалобу на их действия в контролирующие органы.
Строение приложения: 
Первая страница приложения - вверху надпись: "изложите суть Вашей ситуации:" и текстовое поле для заполнения пользователем.  Внизу стилизованная кнопка загрузки PDF-файлов или простых текстовых файлов, если распознавание не требуется. Над кнопкой загрузки надпись: "Приложите входящие документы (.txt / .pdf / .png / .jpg)" 
После добавления нового документа открывается страница его просмотра и редактирования - несколько полей ввода в которые автоматически после анализа документа помещается информация из проанализированного текста с возможностью изменения текста. это сделано для того, чтобы проверить, правильно ли был проанализирован текст в документе и при наличии ошибок - исправить их вручную. Текстовые поля такие-же, как и в файле db.json. Также на этой странице внизу кнопка "Сохранить" при нажатии на которую данная информация пополняет файл db.json (он выступает в роли базы данных). 
Третья страница - отображение списком всех актов записей из файла db.json в виде только поля краткой сути. 
В правой части каждой записи есть кнопка "Проверить законность".
После нажатия кнопки "Проверить законность" нейросеть анализирует выбранный документ, а также весь остальной файл db.json на предмет наличия сведений, существенных для составления жалобы на основе этого входящего документа,  и предлагает на выбор ведомства, в которые пользователь имеет право направить жалобу ('ФССП',
      'Прокуратура',
      'Суд (административное исковое заявление)',
      'Уполномоченный по правам человека (омбудсмен)').  После выбора ведомства, нейросеть формирует жалобу и сохраняет её в файл db.json по аналогии с методом сохранения входящих документов, только в сформированных жалобах добавляется поле, в ответ на какой входящих документ сформирована эта жалоба. 
Четвёртая страница - список сформированных жалоб, по аналогии с третьей страницей, но без кнопки анализировать. При клике на каждую жалобу должно открываться подробное окно просмотра данной жалобы. Напротив каждой сформированной жалобы должна быть кнопка "Экспорт" с возможностью сохранения выбранной жалобы в формате .txt или .doc.
Механика удаления входящих документов и сформированных жалоб уже сформирована - её менять не нужно, без моей прямой просьбы.    



Привет! Посмотри пожалуйста мой проект и скажи, почему у меня не отображается главная страница: https://github.com/GPegov/FatherGuard.git  



____________________________________________
В нейросеть нужно передавать строку (содержимое текстового поля, заполненного пользователем и расшифрованный текст приложенных документов) и ответ тоже получать в виде строки. Первый запрос - сформировать краткую суть всего переданного нейросети текста (2-3 предложения) и вставить её в соответствующее поле в компоненте DocumentReview.vue. Второй запрос - выделить несколько важных параграфов и вставить их в соответствующие поля в компоненте DocumentReview.vue. Если активных полей для параграфов нет, то инициировать нажатие кнопки "Добавить параграф" столько раз, сколько удалось выделить важных параграфов и затем вставить их в эти поля. Многое из этого уже реализовано.

Вся логика и функционал должны быть в Pinia Store, а в компонентах только отображение.
 